extends layout

block content
    link(rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
    integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
    crossorigin="")

    script(src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
    integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
    crossorigin="")

    style.
      body {
        padding: 0;
        margin: 0;
      }
      html, body, #map {
        height: 100%;
        width: 100%;
      }

    h1= title 
    #map

    script.
        var map = L.map('map').setView([51.509865, -0.118092], 12);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: 'Â© OpenStreetMap'
        }).addTo(map);

        //- For each local-authority, plot boundary
        const localAuthorities = !{JSON.stringify(localAuthorities)}
        console.log(localAuthorities)
        const latlongsOfLocalAuthorities = !{JSON.stringify(latlongsOfLocalAuthorities)}
        for (const localAuthority of localAuthorities) {
          // Get latlong coordinates of local-authority
          const latlongs = latlongsOfLocalAuthorities[localAuthority]
          console.log(latlongs)

          //- Create a polygon boundary that uses the latlong coordinates
          var polygon = L.polygon([].concat.apply([],latlongs), {color: 'red', className: localAuthority}).on('click', function(){onClick(this.options.className)}).addTo(map);
        }


        //- Create onclick function to redirect page of boroughs
        function onClick(className) {
          location.href = "/government/" + className;
        }
