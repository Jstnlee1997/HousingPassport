extends ../layout
block append metas 
  meta(name="description" content="Local Authority Map")

block append scripts 
  link(rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
  integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
  crossorigin="")

  script(src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
  integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
  crossorigin="")

  script(src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js')

  //- Stylesheet and Script for Legend
  link(rel="stylesheet" href="/stylesheets/leaflet.legend.css")
  script(type="text/javascript" src="/javascripts/leaflet.legend.js")

block content
  block title 
  block map-content
    div(class="map-wrapper")
      #map
    button(type='button' value="Go back" onclick="location.href = '/map/'") Go Back to London Map
    <br><br>

    h1 Frequency of Energy Ratings
    div(class="container")
      div(class="row")
        div(class="column")
          canvas(id="histogram1" position="relative" width="40vw" height = "20vh")
        div(class="column")
          canvas(id="histogram2" position="relative" width="200" height = "100")
    
    script.
      //- Set up map
      var map = L.map("map").setView([51.493625, -0.224947], 13);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Â© OpenStreetMap'
      }).addTo(map);

      //- Create different marker icons
      var houseBlue = L.icon({
        iconUrl: '/images/house-blue.png',
        iconAnchor: [12, 7]
      })
      var houseYellow = L.icon({
        iconUrl: '/images/house-yellow.png',
        iconAnchor: [12, 7]
      })
      var houseRed = L.icon({
        iconUrl: '/images/house-red.png',
        iconAnchor: [12, 7]
      })

      const propertiesInfo = !{JSON.stringify(propertiesInfo)};
      const totalNumberOfProperties = propertiesInfo.length;
      console.log("Properties Info: ", propertiesInfo)

      //- Add all the markers of the propertiesInfo
      for (const propertyInfo of propertiesInfo) {
        //- Create popup content to display energy information for each household
        var popupContent = `Current Energy Efficiency: ${propertyInfo.currentEnergyEfficiency}<br>
                              Potential Energy Efficiency: ${propertyInfo.potentialEnergyEfficiency}`

        // Add recommendations if they are present
        if (propertyInfo.recommendations) {
          popupContent += "<br><br>Retrofit Suggestion:"
          for (let recommendation = 0; recommendation < propertyInfo.recommendations.Items.length; recommendation++) {
            popupContent += `<br> ${recommendation+1}) ${propertyInfo.recommendations.Items[recommendation]['improvement-id-text']}`
          }
        }

        //- Calculate average of energy efficiencies
        const averageEfficiency = (Number(propertyInfo.potentialEnergyEfficiency) + Number(propertyInfo.currentEnergyEfficiency))/2
        var icon;
        switch (true) {
          case averageEfficiency >= 69:
            icon = houseBlue 
            break;
          case averageEfficiency >= 39:
            icon = houseYellow  
            break;
          default:
            icon = houseRed 
        }
        
        //- Make the marker
        L.marker([propertyInfo.lat, propertyInfo.lng], {icon: icon}).bindPopup(popupContent).openPopup().addTo(map);
      }

      // Create legend
      L.control.Legend({
        position: "bottomleft",
        legends: [
          {
            label: "Energy Grade: A-C",
            type: "image",
            url: "/images/house-blue.png"
          },
          {
            label: "Energy Grade: D-E",
            type: "image",
            url: "/images/house-yellow.png"
          },
          {
            label: "Energy Grade: F-G",
            type: "image",
            url: "/images/house-red.png"
          }
          ]
      }).addTo(map); 

      //- CHART for frequencyOfCurrentEnergyRatings
      const frequencyOfCurrentEnergyRatings = !{JSON.stringify(frequencyOfCurrentEnergyRatings)}

      const ctx1 = document.getElementById('histogram1').getContext('2d');
      const chart1 = new Chart(ctx1, {
        type: 'bar',
        data: {
          labels: [`A (${Math.round((frequencyOfCurrentEnergyRatings["A"]/totalNumberOfProperties*100))}%)`,
                  `B (${Math.round((frequencyOfCurrentEnergyRatings["B"]/totalNumberOfProperties*100))}%)`,
                  `C (${Math.round((frequencyOfCurrentEnergyRatings["C"]/totalNumberOfProperties*100))}%)`,
                  `D (${Math.round((frequencyOfCurrentEnergyRatings["D"]/totalNumberOfProperties*100))}%)`,
                  `E (${Math.round((frequencyOfCurrentEnergyRatings["E"]/totalNumberOfProperties*100))}%)`,
                  `F (${Math.round((frequencyOfCurrentEnergyRatings["F"]/totalNumberOfProperties*100))}%)`,
                  `G (${Math.round((frequencyOfCurrentEnergyRatings["G"]/totalNumberOfProperties*100))}%)`,
          ],
          datasets: [{
            label: 'Frequency of Current Energy Ratings',
            data: [frequencyOfCurrentEnergyRatings["A"], 
                    frequencyOfCurrentEnergyRatings["B"],
                    frequencyOfCurrentEnergyRatings["C"],
                    frequencyOfCurrentEnergyRatings["D"], 
                    frequencyOfCurrentEnergyRatings["E"], 
                    frequencyOfCurrentEnergyRatings["F"],
                    frequencyOfCurrentEnergyRatings["G"]],
            backgroundColor: ['rgba(255, 99, 132, 0.2)',
                              'rgba(255, 159, 64, 0.2)',
                              'rgba(255, 205, 86, 0.2)',
                              'rgba(75, 192, 192, 0.2)',
                              'rgba(54, 162, 235, 0.2)',
                              'rgba(153, 102, 255, 0.2)',
                              'rgba(201, 203, 207, 0.2)'],
            borderColor: [
              'rgb(255, 99, 132)',
              'rgb(255, 159, 64)',
              'rgb(255, 205, 86)',
              'rgb(75, 192, 192)',
              'rgb(54, 162, 235)',
              'rgb(153, 102, 255)',
              'rgb(201, 203, 207)',
            ],
            borderWidth: 1,
          }]
        },
        options: {
          animation: false,
          scales: {
            y: {
              beginAtZero: true,
              min: 0
            }
          },
          legend: {
            display: true 
          }
        }
      })

      //- CHART for frequencyOfPotentialEnergyRatings
      const frequencyOfPotentialEnergyRatings = !{JSON.stringify(frequencyOfPotentialEnergyRatings)}

      const ctx2 = document.getElementById('histogram2').getContext('2d');
      const chart2 = new Chart(ctx2, {
        type: 'bar',
        data: {
          labels: [`A (${Math.round((frequencyOfPotentialEnergyRatings["A"]/totalNumberOfProperties*100))}%)`,
                  `B (${Math.round((frequencyOfPotentialEnergyRatings["B"]/totalNumberOfProperties*100))}%)`,
                  `C (${Math.round((frequencyOfPotentialEnergyRatings["C"]/totalNumberOfProperties*100))}%)`,
                  `D (${Math.round((frequencyOfPotentialEnergyRatings["D"]/totalNumberOfProperties*100))}%)`,
                  `E (${Math.round((frequencyOfPotentialEnergyRatings["E"]/totalNumberOfProperties*100))}%)`,
                  `F (${Math.round((frequencyOfPotentialEnergyRatings["F"]/totalNumberOfProperties*100))}%)`,
                  `G (${Math.round((frequencyOfPotentialEnergyRatings["G"]/totalNumberOfProperties*100))}%)`,
          ],
          datasets: [{
            label: 'Frequency of Potential Energy Ratings',
            data: [frequencyOfPotentialEnergyRatings["A"], 
                  frequencyOfPotentialEnergyRatings["B"], 
                  frequencyOfPotentialEnergyRatings["C"], 
                  frequencyOfPotentialEnergyRatings["D"], 
                  frequencyOfPotentialEnergyRatings["E"], 
                  frequencyOfPotentialEnergyRatings["F"],
                  frequencyOfPotentialEnergyRatings["G"]],
            backgroundColor: ['rgba(255, 99, 132, 0.2)',
                              'rgba(255, 159, 64, 0.2)',
                              'rgba(255, 205, 86, 0.2)',
                              'rgba(75, 192, 192, 0.2)',
                              'rgba(54, 162, 235, 0.2)',
                              'rgba(153, 102, 255, 0.2)',
                              'rgba(201, 203, 207, 0.2)'],

            borderColor: [
              'rgb(255, 99, 132)',
              'rgb(255, 159, 64)',
              'rgb(255, 205, 86)',
              'rgb(75, 192, 192)',
              'rgb(54, 162, 235)',
              'rgb(153, 102, 255)',
              'rgb(201, 203, 207)',
            ],
            borderWidth: 1
          }]
        },
        options: {
          animation: false,
          scales: {
            y: {
              beginAtZero: true,
              min: 0
            }
          },
          legend: {
            display: true 
          }
        }
      })