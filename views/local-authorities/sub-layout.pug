extends ../layout

block append scripts 
    link(rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
    integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
    crossorigin="")

    script(src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
    integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
    crossorigin="")

    script(src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js')

block content
    block title 
    block map-content
      #map
      button(type='button' value="Go back" onclick="location.href = '/map/'") Go Back to London Map
      <br><br>

      h1 Frequency of Current Energy Ratings
      canvas(id="histogram1" position="relative" width="200" height = "100")
      
      <br><br>
      h1 Frequency of Potential Energy Ratings
      canvas(id="histogram2" position="relative" width="200" height = "100")

      script.
        //- Set up map
        var map = L.map("map").setView([51.493625, -0.224947], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: 'Â© OpenStreetMap'
        }).addTo(map);

        //- Create different marker icons
        var houseBlue = L.icon({
          iconUrl: '/images/house-blue.png',
          iconSize: [24, 14],
          iconAnchor: [12, 7]
        })
        var houseYellow = L.icon({
          iconUrl: '/images/house-yellow.png',
          iconSize: [24, 14],
          iconAnchor: [12, 7]
        })
        var houseRed = L.icon({
          iconUrl: '/images/house-red.png',
          iconSize: [24, 14],
          iconAnchor: [12, 7]
        })

        const propertiesInfo = !{JSON.stringify(propertiesInfo)};
        console.log("Properties Info: ", propertiesInfo)

        //- Add all the markers of the propertiesInfo
        for (const propertyInfo of propertiesInfo) {
          //- Create popup content to display energy information for each household
          var popupContent = `Current Energy Efficiency: ${propertyInfo.currentEnergyEfficiency}<br>
                                Potential Energy Efficiency: ${propertyInfo.potentialEnergyEfficiency}`

          // Add recommendations if they are present
          if (propertyInfo.recommendations) {
            for (let recommendation = 0; recommendation < propertyInfo.recommendations.Items.length; recommendation++) {
              popupContent += `<br> Retrofit Suggestion ${recommendation+1}: ${propertyInfo.recommendations.Items[recommendation]['improvement-id-text']}`
            }
          }

          //- Calculate average of energy efficiencies
          const averageEfficiency = (Number(propertyInfo.potentialEnergyEfficiency) + Number(propertyInfo.currentEnergyEfficiency))/2
          var icon;
          switch (true) {
            case averageEfficiency >= 69:
              icon = houseBlue 
              break;
            case averageEfficiency >= 39:
              icon = houseYellow  
              break;
            default:
              icon = houseRed 
          }
          
          //- Make the marker
          L.marker([propertyInfo.lat, propertyInfo.lng], {icon: icon}).bindPopup(popupContent).openPopup().addTo(map);
        }

        //- CHART for frequencyOfCurrentEnergyRatings
        const frequencyOfCurrentEnergyRatings = !{JSON.stringify(frequencyOfCurrentEnergyRatings)}

        const ctx1 = document.getElementById('histogram1').getContext('2d');
        const chart1 = new Chart(ctx1, {
          type: 'bar',
          data: {
            labels: ['A', 'B', 'C', 'D', 'E', 'F'],
            datasets: [{
              //- label: 'Frequency of Current Energy Ratings',
              data: [frequencyOfCurrentEnergyRatings["A"], frequencyOfCurrentEnergyRatings["B"], frequencyOfCurrentEnergyRatings["C"], frequencyOfCurrentEnergyRatings["D"], frequencyOfCurrentEnergyRatings["E"], frequencyOfCurrentEnergyRatings["F"]],
              backgroundColor: ['rgba(255, 99, 132, 0.2)',
                                'rgba(255, 159, 64, 0.2)',
                                'rgba(255, 205, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(153, 102, 255, 0.2)'],
              borderColor: [
                'rgb(255, 99, 132)',
                'rgb(255, 159, 64)',
                'rgb(255, 205, 86)',
                'rgb(75, 192, 192)',
                'rgb(54, 162, 235)',
                'rgb(153, 102, 255)'
              ],
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            },
            legend: {
              display: false 
            }
          }
        })

        //- CHART for frequencyOfPotentialEnergyRatings
        const frequencyOfPotentialEnergyRatings = !{JSON.stringify(frequencyOfPotentialEnergyRatings)}

        const ctx2 = document.getElementById('histogram2').getContext('2d');
        const chart2 = new Chart(ctx2, {
          type: 'bar',
          data: {
            labels: ['A', 'B', 'C', 'D', 'E', 'F'],
            datasets: [{
              //- label: 'Frequency of Current Energy Ratings',
              data: [frequencyOfPotentialEnergyRatings["A"], frequencyOfPotentialEnergyRatings["B"], frequencyOfPotentialEnergyRatings["C"], frequencyOfPotentialEnergyRatings["D"], frequencyOfPotentialEnergyRatings["E"], frequencyOfPotentialEnergyRatings["F"]],
              backgroundColor: ['rgba(255, 99, 132, 0.2)',
                                'rgba(255, 159, 64, 0.2)',
                                'rgba(255, 205, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(153, 102, 255, 0.2)'],
              borderColor: [
                'rgb(255, 99, 132)',
                'rgb(255, 159, 64)',
                'rgb(255, 205, 86)',
                'rgb(75, 192, 192)',
                'rgb(54, 162, 235)',
                'rgb(153, 102, 255)'
              ],
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            },
            legend: {
              display: false 
            }
          }
        })